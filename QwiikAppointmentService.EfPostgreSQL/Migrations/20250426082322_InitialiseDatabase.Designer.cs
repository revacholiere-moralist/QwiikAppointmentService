// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QwiikAppointmentService.EfPostgreSQL.Context;

#nullable disable

namespace QwiikAppointmentService.EfPostgreSQL.Migrations
{
    [DbContext(typeof(QwiikAppointmentServiceDataContext))]
    [Migration("20250426082322_InitialiseDatabase")]
    partial class InitialiseDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QwiikAppointmentService.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDateTimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("AppointmentDateTimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LastUpdatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("QwiikAppointmentService.Domain.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LastUpdatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Person", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 2, 54, 564, DateTimeKind.Utc).AddTicks(8363),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 2, 54, 564, DateTimeKind.Utc).AddTicks(8363),
                            Email = "admin@test.com",
                            FirstName = "SuperAdmin",
                            IsActive = true,
                            LastName = "SuperAdmin",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 2, 54, 564, DateTimeKind.Utc).AddTicks(8363),
                            Username = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("QwiikAppointmentService.Domain.Entities.Customer", b =>
                {
                    b.HasBaseType("QwiikAppointmentService.Domain.Entities.Person");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("QwiikAppointmentService.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("QwiikAppointmentService.Domain.Entities.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QwiikAppointmentService.Domain.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QwiikAppointmentService.Domain.Entities.Person", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("QwiikAppointmentService.Domain.Entities.Person", b =>
                {
                    b.HasOne("QwiikAppointmentService.Domain.Entities.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QwiikAppointmentService.Domain.Entities.Person", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("QwiikAppointmentService.Domain.Entities.Customer", b =>
                {
                    b.HasOne("QwiikAppointmentService.Domain.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("QwiikAppointmentService.Domain.Entities.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QwiikAppointmentService.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
